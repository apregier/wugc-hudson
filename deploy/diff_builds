#!/gsc/bin/perl

use strict;
use warnings;
use MIME::Lite;

use Users;
use Library;
use Defaults;


# Get hudson build number and construct URL
# FIXME Hudson is supposed to store the URL in an environment variable, but I couldn't get it to work
my $hudson_build_number = $ENV{BUILD_NUMBER};
unless (defined $hudson_build_number) {
    print "BUILD_NUMBER environment variable (corresponds to hudson build ID) not set, using dummy value!\n";
    $hudson_build_number = -42;
}
my $hudson_build_url = join('/', 'http://hudson:8090/job/Diff%20Test%20Build%20Output', $hudson_build_number);

# The nightly build runner runs on snapshots in the passed unit tests directory, so we need
# to look for builds run on snapshots in this diretory
my $tested_snapshot_dir = $Defaults::TESTED_SNAPSHOT_DIR;
my @snapshots = glob("$tested_snapshot_dir/*");

print "Found " . scalar @snapshots . " snapshots in $tested_snapshot_dir\n";

# Get the most recent snapshot in the passed-unit-tests directory 
# TODO Use the sqlite database Justin is setting up instead of this
my $latest_hudson_id = 0;
my $latest_snapshot;
for my $snapshot (@snapshots) {
    my ($id) = $snapshot =~ /.*genome-(\d+).*/;
    next unless defined $id;
    if ($id > $latest_hudson_id) {
        $latest_hudson_id = $id;
        $latest_snapshot = $snapshot . '/lib/perl';
    }
}

# Figure out what the current genome-stable snapshot is
my $stable_symlink = $Defaults::STABLE_SYMLINK;
my $stable_snapshot = readlink $stable_symlink; 
$stable_snapshot .= '/lib/perl/';
die "No stable snapshot found at $stable_snapshot" unless -d $stable_snapshot;

# Snapshots that are patched are placed in the custom snapshot directory. The fix-## needs to be removed
# and the custom path needs to be replaced with the tested snapshot path (since that's where the snapshot
# lives when nightly builds are run)
if ($stable_snapshot =~ /-fix\d+/) {
    $stable_snapshot =~ s/-fix\d+//;
    $stable_snapshot =~ s/$Defaults::CUSTOM_SNAPSHOT_DIR/$Defaults::TESTED_SNAPSHOT_DIR/;
}
# If there is no fix on the snapshot, it'll be in the stable snapshot directory
else {
    $stable_snapshot =~ s/$Defaults::STABLE_SNAPSHOT_DIR/$Defaults::TESTED_SNAPSHOT_DIR/;
}

print "Latest snapshot seems to be $latest_snapshot, diffing against current genome-stable $stable_snapshot\n";

my $diff_cmd = "perl -I $stable_snapshot `which genome` model diff --first-revision " .
    "$latest_snapshot --second-revision $stable_snapshot apipe-test%";

# Run command and check return values. Send out failure email if necessary.
my $diff_out = eval { `$diff_cmd 2>&1` };
if ($@ or $?) {
    my $exit_code = $@ ? $@ : ($? >> 8);
    print "Problems executing diff command\nExit code: $exit_code\nOutput:\n$diff_out";
    my $failure_msg_body = "Hudson diff build $hudson_build_number failed to execute! To see raw output, go to $hudson_build_url";
    Library::send_mail(
        subject => '[fail] Test Build Diff Failed to Execute!', 
        body => $failure_msg_body,
        from => 'apipe-tester@genome.wustl.edu',
        to => Library::users_to_addresses(Users::apipe()),
    );
    exit 1;
}

# Now that the command is run, see if there were any differences or if some builds couldn't be found and
# send emails to the appropriate people.
print "Diff command output:\n$diff_out\n";

my $problems = 0;
while ($diff_out =~ /(DIFFERENCES FOUND|BUILD NOT FOUND) (\w+) (\d+)/cg) {
    my $error_type = $1;
    my $build_type = $2;
    my $model_id = $3;
    $problems = 1;

    # See if there are owners defined for this build type and send the mail to them
    # cc the entire apipe team (but don't send to apipe@genome.wustl.edu because 
    # people outside of the group get mail from that alias)
    my @to;
    if (Users->can($build_type)) {
        @to = Users->$build_type;
    }
    else {
        @to = Users::apipe();
    }
    my @cc = Users::apipe();

    my ($failure_msg, $failure_subject);
    if ($error_type =~ /DIFFERENCES FOUND/) {
        $failure_msg = "Output differences detected when comparing builds of type $build_type from model $model_id " .
            "run on latest snapshot $latest_snapshot and stable snapshot $stable_snapshot.\n\nTo see raw output, go to $hudson_build_url.";
        $failure_subject = "[fail] differences found, model $model_id, $build_type - " . join(",", @to);
    }
    else {
        $failure_msg = "Problem occurred when attempting to compare builds of type $build_type from model $model_id " .
            "run on latest snapshot $latest_snapshot and stable snapshot $stable_snapshot.\n\n" .
            "Please take a look at $hudson_build_url.";
        $failure_subject = "[fail] problem executing build differ, model $model_id, $build_type - " . join(",", @to);
    }

    Library::send_mail(
        to => Library::users_to_addresses(@to),
        from => 'apipe-tester@genome.wustl.edu',
        cc => Library::users_to_addresses(@cc),
        subject => $failure_subject,
        body => $failure_msg,
    );
}

if ($problems) {
    print "Differences or errors encountered, please review and/or fix!\n";
    exit 1;
}
else {
    print "Test build differ completed successfully and no differences found!\n";
    print "Fin.\n";
    exit 0;
}

