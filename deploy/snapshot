#!/gsc/bin/perl

use strict;
use warnings;

use LWP::Simple;
use Getopt::Long;

#############
# 1. Get RSS feed to see if anything has passed today
# 2. If so, get SVN and Git versions of Genome and UR
# 3. Copy the relevant folders into the SNAPSHOT_PATH.
# 4. Run UR's test runner to generate relevant sqlite dbs
# 5. Deploy to /gsc/scripts/opt
# 6. Deploy to /gsc/scripts/lib/perl
#############

use Defaults;
use Library;
# Begin actual script run. We will eventually provide command line options for versions.
# -b is for recent builds. -g is for genome rev. -u is for ur hash.

if ($#ARGV == -1) { # no args. print usage message.
    print "USAGE: perl deploy_script.pl --name=genome-number [--deploy] AND [--recent] OR [--build] OR [--genome and --ur and --workflow]\n";
    print "OPTIONS:\n";
    print "   --deploy        \tDeploy to /gsc/scripts/opt after local snapshot\n";
    print "\n\n";    
    print "   --recent        \tUse the most recent successful Hudson build.\n\n";
    print "\tOR\n\n";
    print "   --build   {number}\tUse Genome and UR versions used in build number {number}.\n\n";
    print "\tOR\n\n";
    print "   --genome  {hash}\tUse genome from Git hash (hash).\n";
    print "   --ur      {hash}\tUse UR from Git hash (hash).\n";
    print "   --workflow {hash}\tUse workflow from Git hash (hash).\n";
    exit;
}
my ($genome_hash, $ur_hash, $workflow_hash, $new_build_number, $recent, $deploy, $snapshot_name);

GetOptions (
    "name=s" => \$snapshot_name,
    "recent" => \$recent,
    "deploy" => \$deploy,
    "build=i" => \$new_build_number,
    "genome=s" => \$genome_hash,
    "ur=s" => \$ur_hash,
    "workflow=s" => \$workflow_hash
);

if ( defined $genome_hash and defined $ur_hash and defined $workflow_hash ) {
    print "Genome and UR revisions declared. Snapshotting from these:\n";
    print "Genome hash: " . $genome_hash . "\n";
    print "UR hash: " . $ur_hash . "\n";
    print "Workflow hash: " . $workflow_hash . "\n";
} else {
    if ( defined $recent ) {
        $new_build_number = Library::check_for_new_build;

        unless ( $new_build_number != 0 and defined $new_build_number ) {
            die "No passing recent build found.";
        }

        print "Recent build found: #" . $new_build_number . "\n";

    } elsif ( defined $new_build_number ) {
        print "Build number specified: " . $new_build_number . "\n";
    } else {
        die "You must either specify a build number, use the --recent flag, or provide genome and ur rev #s.";
    }

    $genome_hash = get_genome_svn_rev($new_build_number);

    print "Genome hash" . $genome_hash . "\n";

    $ur_hash = get_ur_git_hash($new_build_number);

    print "UR Hash: " . $ur_hash . "\n";

    $workflow_hash = get_workflow_hash($new_build_number);
}

unless (defined $genome_hash && $genome_hash ne '' && defined $ur_hash && $ur_hash ne '' && defined $workflow_hash && $workflow_hash ne '')
{
    die "Some needed variable is not set.\n";
}

my $snapshot_path = "$Defaults::SNAPSHOT_PATH/$snapshot_name";
my $working_path = "/tmp/working-$snapshot_name";

if (-e ($snapshot_path) ) { die "Snapshot dir exists at $snapshot_path\n"; }

`mkdir $snapshot_path`;
`mkdir $working_path`;

# first we're going to clone all the stuff we want into our working path.

`mkdir $snapshot_path/lib; mkdir $snapshot_path/lib/perl`;

# define repositories, locations, namespaces
my @repos = (
    {
        repository_name => 'UR',
        repository_url => 'git://github.com/sakoht/UR.git',
        hash => $ur_hash,
        library_path => 'lib',
        namespaces => ['UR', 'Command'],
        
    },
    {
        repository_name => 'workflow',
        repository_url => 'ssh://git/srv/git/workflow.git',
        hash => $workflow_hash,
        library_path => 'lib',
        namespaces => ['Workflow'],
    },
    {
        repository_name => 'genome',
        repository_url => 'ssh://git/srv/git/genome.git',
        hash => $genome_hash,
        library_path => 'lib/perl',
        namespaces => ['BAP', 'Bio', 'EGAP', 'GAP', 'Genome', 'MGAP', 'PAP'],
    }
);


my $recorded_hash;
my $command;
for my $repo (@repos) {
    $command = "cd $working_path; git clone " . $repo->{'repository_url'} . " " . $repo->{'repository_name'};
    `$command`;
    $command = "cd $working_path/" . $repo->{'repository_name'} . "; git show --pretty=oneline " . $repo->{'hash'} . " | tr -d '\n' | cut -d ' ' -f1";
    $recorded_hash = `$command`;
    chomp $recorded_hash; chomp $recorded_hash; chomp $recorded_hash;
    for my $ns ( @{ $repo->{'namespaces'} } ) {
        $DB::single = 1;
        print "Beginning work on namespace $ns\n";
        $command = "cd $working_path/" . $repo->{'repository_name'} . "/" . $repo->{'library_path'} . "; git archive " . $repo->{'hash'} . " $ns | tar -x -C $snapshot_path/lib/perl";
        `$command`;
        $command = "cd $working_path/" . "/" . $repo->{'repository_name'} . "/" . $repo->{'library_path'} . "; git archive " . $repo->{'hash'} . " $ns.pm | tar -x -C $snapshot_path/lib/perl";
        `$command`;
    }
    # record hash in revisions.txt
    $command = 'echo "' . $repo->{'repository_name'} . ' ' . $recorded_hash . '" >> ' . $snapshot_path . "/revisions.txt";
    `$command`;
}

$command = "rm $working_path/ -rf";
`$command`;

my @dump_files = `find $snapshot_path -iname *sqlite3-dump`;
for my $sqlite_dump (@dump_files) {
    my $sqlite_db = $sqlite_dump;
    chomp $sqlite_db;
    $sqlite_db =~ s/-dump//;
    if (-e $sqlite_db) {
        #warn "SQlite database $sqlite_db already exists.";
    } else {
        `sqlite3 $sqlite_db < $sqlite_dump`;
    }
    unless (-e $sqlite_db) {
        die "Failed to reconstitute $sqlite_dump as $sqlite_db!";
    }
}

print "Finished copying to local machine. Snapshot available at $snapshot_path\n";

if ( defined $deploy ) {
    `scp -pqr $snapshot_path linus1:/gsc/scripts/opt/genome-$genome_hash-testing`; # deploy to /gsc/scripts/opt if used the --deploy flag
    print "Finished copying to remote server. Snapshot available at /gsc/scripts/opt/genome-$genome_hash-testing\n";
}
