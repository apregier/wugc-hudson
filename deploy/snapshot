#!/gsc/bin/perl

use strict;
use warnings;

use LWP::Simple;
use Getopt::Long;
use File::chdir;

#############
# 1. Get RSS feed to see if anything has passed today
# 2. If so, get SVN and Git versions of Genome and UR
# 3. Copy the relevant folders into the SNAPSHOT_PATH.
# 4. Run UR's test runner to generate relevant sqlite dbs
# 5. Deploy to /gsc/scripts/opt
# 6. Deploy to /gsc/scripts/lib/perl
#############

use Defaults;
use Library;
# Begin actual script run. We will eventually provide command line options for versions.
# -b is for recent builds. -g is for genome rev. -u is for ur hash.

if ($#ARGV == -1) { # no args. print usage message.
    print "USAGE: perl deploy_script.pl --name=genome-number [--deploy] AND [--recent] OR [--build] OR [--genome and --ur and --workflow]\n";
    print "OPTIONS:\n";
    print "   --deploy        \tDeploy to /gsc/scripts/opt after local snapshot\n";
    print "\n\n";    
    print "   --recent        \tUse the most recent successful Hudson build.\n\n";
    print "\tOR\n\n";
    print "   --build   {number}\tUse Genome and UR versions used in build number {number}.\n\n";
    print "\tOR\n\n";
    print "   --genome  {hash}\tUse genome from Git hash (hash).\n";
    print "   --ur      {hash}\tUse UR from Git hash (hash).\n";
    print "   --workflow {hash}\tUse workflow from Git hash (hash).\n";
    exit;
}
my ($genome_hash, $ur_hash, $workflow_hash, $new_build_number, $recent, $testing, $modeltests, $snapshot_name);

GetOptions (
    "name=s" => \$snapshot_name,
    "recent" => \$recent,
    "testing" => \$testing,
    "modeltests" => \$modeltests,
    "build=i" => \$new_build_number,
    "genome=s" => \$genome_hash,
    "ur=s" => \$ur_hash,
    "workflow=s" => \$workflow_hash
);

if ( defined $genome_hash and defined $ur_hash and defined $workflow_hash ) {
    print "Genome and UR revisions declared. Snapshotting from these:\n";
} else { # based in some way off Hudson builds
    if ( defined $recent ) {
        $new_build_number = Library::check_for_new_build;

        unless ( $new_build_number != 0 and defined $new_build_number ) {
            die "No passing recent build found.";
        }

        print "Recent build found: #" . $new_build_number . "\n";

    } elsif ( defined $new_build_number ) {
        print "Build number specified: " . $new_build_number . "\n";
    } else {
        die "You must either specify a build number, use the --recent flag, or provide genome and ur rev #s.";
    }

    $genome_hash = Library::get_genome_hash($new_build_number);

    $ur_hash = Library::get_ur_hash($new_build_number);

    $workflow_hash = Library::get_workflow_hash($new_build_number);

    unless ( defined $snapshot_name ) {
        $snapshot_name = 'genome-' . $new_build_number;
    }
}

print "Genome hash: " . $genome_hash . "\n";
print "UR hash: " . $ur_hash . "\n";
print "Workflow hash: " . $workflow_hash . "\n";
print "Snapshot name: " . $snapshot_name . "\n";

unless (defined $genome_hash 
        && $genome_hash ne '' 
        && defined $ur_hash 
        && $ur_hash ne '' 
        && defined $workflow_hash 
        && $workflow_hash ne '') {
    die "Some needed variable is not set.\n";
}

my $snapshot_path = "$Defaults::SNAPSHOT_PATH/$snapshot_name";
my $working_path = "/tmp/working-$snapshot_name";

my @repos = (
    {
        repository_name => 'UR',
        repository_url => 'git://github.com/sakoht/UR.git',
        hash => $ur_hash,
        library_path => 'lib',
        namespaces => ['UR', 'Command'],
        
    },
    {
        repository_name => 'workflow',
        repository_url => 'ssh://git/srv/git/workflow.git',
        hash => $workflow_hash,
        library_path => 'lib',
        namespaces => ['Workflow'],
    },
    {
        repository_name => 'genome',
        repository_url => 'ssh://git/srv/git/genome.git',
        hash => $genome_hash,
        library_path => 'lib/perl',
        namespaces => ['BAP', 'Bio', 'EGAP', 'GAP', 'Genome', 'MGAP', 'PAP'],
    }
);

Library::snapshot_namespaces( $snapshot_path, @repos );

my @dump_files = `find $snapshot_path -iname *sqlite3-dump`;
for my $sqlite_dump (@dump_files) {
    my $sqlite_db = $sqlite_dump;
    chomp $sqlite_db;
    $sqlite_db =~ s/-dump//;
    if (-e $sqlite_db) {
        #warn "SQlite database $sqlite_db already exists.";
    } else {
        my $sqlite_path = $ENV{SQLITE_PATH} || 'sqlite3';
        `$sqlite_path $sqlite_db < $sqlite_dump`;
        die "Error: died building sqlite db for $sqlite_dump" if $?;
    }
    unless (-e $sqlite_db) {
        die "Failed to reconstitute $sqlite_dump as $sqlite_db!";
    }
}

print "FIXME MISSING SO FILES: Generating auto-competition opt files\n";
`cd $snapshot_path/lib/perl/; ur create-completion-spec-file Genome::Command`;
die "Error: exit code $? for create-completion-spec-file Genome::Command" if $?;
`cd $snapshot_path/lib/perl/; ur create-completion-spec-file Genome::Model::Tools`;
die "Error: exit code $? for create-completion-spec-file Genome::Command" if $?;
`cd $snapshot_path/lib/perl/; ur create-completion-spec-file UR::Namespace::Command`;
die "Error: exit code $? for create-completion-spec-file Genome::Command" if $?;

print "Finished copying to local machine. Snapshot available at $snapshot_path\n";

my $passed_unit_test_path = qq{/gsc/scripts/opt/passed-unit-tests/$snapshot_name};
my $passed_model_test_path = qq{/gsc/scripts/opt/passed-model-tests/$snapshot_name};

if ( defined $testing ) {

    # deploy to /gsc/scripts/opt if used the --deploy flag
    my $cmd = "scp -pqr $snapshot_path deploy:/gsc/scripts/opt/passed-unit-tests/"; 
    print "$cmd\n";
    my $out = `$cmd`;
    print "-----output from scp-----\n$out\n----------\n";
    die "Error: scp failed to copy to passed-unit-tests (exit code $?)" if $?;


    print "+ Copied snapshot here: $passed_unit_test_path \n";

    if ( defined $modeltests ) {

        print "+ starting up model tests\n";
        my $cwd = join('/', $passed_unit_test_path, 'lib', 'perl');
        die "path doesnt exist: $cwd" if ! -e $cwd;

        local $CWD = $cwd;
        my $cmd_out = `$ENV{APIPE_TEST_SCRIPT_PATH}`;
            if (defined($?) && $? > 0) {
                my $e = $? >> 8;
                print "ERROR exit code $e\n$cmd_out";
                exit($e);
            }

    }
}


    my $cmd = "scp -pqr $passed_unit_test_path deploy:/gsc/scripts/opt/passed-model-tests/"; 
    print "$cmd\n";
    my $out = `$cmd`;
    print "-----output from scp-----\n$out\n----------\n";
    die "Error: fialed to scp to passed-model-tests" if $?;
    print "+ Done. Snapshot is here: $passed_model_test_path \n";



