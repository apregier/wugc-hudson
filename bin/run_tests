#!/usr/bin/env perl

use strict;
use warnings;
require XML::Simple;

BEGIN {
    require Cwd;
	require File::Basename;
    my $lib_dir = Cwd::abs_path(File::Basename::dirname(__FILE__) . '/../lib/');
    unless (grep { $lib_dir eq Cwd::abs_path($_) } @INC) {
        push @INC, $lib_dir;
    }
}

require Defaults;
require Snapshot;


my $workspace = $ENV{WORKSPACE} || die;
my $build_number = $ENV{BUILD_NUMBER} || die;
my $code_storage_base = $ENV{CODE_STORAGE_BASE} || die;
my $hudson_project_path = $ENV{HUDSON_PROJECT_PATH} || die;

my $build_name = "genome-$build_number";
print "Build Name: $build_name\n";

## cleanup workspace
unless ( -d $workspace ) {
	die "Error: $workspace is not a directory.\n";
}
print "Cleaing workspace ($workspace)\n";
system("rm -rf $workspace/*") && die;

## create snapshot
my @source_dirs = ("$code_storage_base/genome", "$code_storage_base/UR", "$code_storage_base/workflow");
print "Updating Git repos\n";
for my $source_dir (@source_dirs) {
	system("cd $source_dir && git reset --hard && git pull") && die;
}
#print "Tagging Genome with $build_name\n";
#system("cd $code_storage_base/genome && " . Defaults::GIT_BIN . " tag $build_name && " . Defaults::GIT_BIN . " push origin master --tags") && die;
print "Creating Snapshot\n";
my $snapshot = Snapshot->create(
	snapshot_dir => "$workspace/$build_name",
	source_dirs => \@source_dirs,
);

## run tests
print "Running tests\n";
my $cmd  = "cd " . $snapshot->{snapshot_dir} . "/lib/perl/Genome &&";
   $cmd .= " PERL_TEST_HARNESS_DUMP_TAP='$workspace/test_result' /gsc/bin/perl";
   $cmd .= " -I " . $snapshot->{snapshot_dir} . "/lib/perl";
   $cmd .= " " . $snapshot->{snapshot_dir} . "/bin/ur test run";
if (@ARGV) {
   $cmd .= " " . join(' ', @ARGV);
} else {
   $cmd .= " --junit --recurse --lsf --jobs=15";
   $cmd .= " --lsf-params=\"-q short -R 'select[type==LINUX64 && model!=Opteron250 && tmp>1000 && mem>4000] rusage[tmp=1000, mem=4000]'\"";
}
system($cmd);

my $tests_passed = 1;
my @xml_files = qx[find $workspace/test_result -name '*.junit.xml'];
map { chomp $_ } @xml_files;
for my $xml_file (@xml_files) {
	my $test_xml = XML::Simple::XMLin($xml_file);
	if ( $test_xml->{testsuite}{failures} || $test_xml->{testsuite}{errors} ) {
		$tests_passed = 0;
		print "Test failures/errors\n";
		last;
	}
}

if ( $tests_passed ) {
	print "Passed tests, promoting snapshot\n";
	$snapshot->move_to('tested');
	exit;
} else {
	print "Emailing failures\n";
	$snapshot->move_to('unstable');
	system("bsub -u " . Defaults::BSUB_EMAIL_TO() . " -q short " . Defaults::BIN_DIR() . "/email_failures $build_number") && die;
	exit 1;
}
