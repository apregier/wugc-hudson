#!/usr/bin/perl

use strict;
use warnings;

use Genome;
use Revision;
use Library;
use Users;

local $| = 1;

my $job_name = $ENV{JOB_NAME} or die 'JOB_NAME not set.';
my $build_url = $ENV{BUILD_URL} or die 'BUILD_URL not set.';
my $build_number = $ENV{BUILD_NUMBER} or die 'BUILD_NUMBER not set.';
my $test_spec = $ENV{TEST_SPEC} or die 'TEST_SPEC not set.';

$0 = sprintf("%s %s # TEST_SPEC = %s", $^X, __FILE__, $test_spec);

print "\n\n => Environment Info\n";
print join("\n\t", "PATHs:", split(':', $ENV{PATH})), "\n";
print join("\n\t", "PERL5LIBs:", split(':', $ENV{PERL5LIB})), "\n";
print "\n";

if (index($test_spec, 'GQP-') == 0 && !$ENV{GENOME_QUERY_POSTGRES}) {
    printf("TEST_SPEC starts with GQP but GENOME_QUERY_POSTGRES is not enabled!\n") and exit(255);
}

if (index($test_spec, 'GQP-') == -1 && $ENV{GENOME_QUERY_POSTGRES}) {
    printf("TEST_SPEC does not start with GQP but GENOME_QUERY_POSTGRES is enabled!\n") and exit(255);
}

$test_spec =~ s/^GQP-//;

my ($perl_version, $model_subname) = $test_spec =~ /(.*?)-(.*)/;
if ($perl_version ne Revision->perl_version()) {
    printf("Perl version specified by TEST_SPEC (%s) does not matching running version (%S)!\n", $perl_version, Revision->perl_version()) and exit(255);
}

my $model_name = sprintf('apipe-test-%s', $model_subname);
my $model = Genome::Model->get(name => $model_name);
if ($model) {
    printf("Found model (%s) with name '%s'.\n\n", $model->id, $model->name);
} else {
    printf("Could not get test model by name (%S)!\n\n", $model_name) and exit(255);
}

my $test_version = Revision->test_version();
if ($ENV{GENOME_QUERY_POSTGRES}) {
    $test_version = "GQP-$test_version";
}
if ($ENV{WF_USE_FLOW}) {
    $test_version = "FLOW-$test_version";
}

# Per Model Customizations
print("Customizing test environment...\n");

# GENOME_SOFTWARE_RESULT_TEST_NAME
if (grep { $model_subname eq $_ } (
        'somatic-variation',
        'somatic-short',
        'somatic-validation',
        'somatic-variation-short',
        'somatic-variation-sv-detection',
        )
) {
    print("Set GENOME_SOFTWARE_RESULT_TEST_NAME to '$test_version'.\n");
    $ENV{GENOME_SOFTWARE_RESULT_TEST_NAME} = $test_version;
}

# timeout
my $HOUR = 3600;
my %timeouts = (
    'somatic-variation' => 36 * $HOUR,
    'clinseq-v1' => 12 * $HOUR,
);
my $timeout = $timeouts{$model_subname} || (6 * $HOUR);

# Done with Per Model Customizations
print "\n";

my $build = Genome::Model::Build->get(
    model_name => $model->name,
    run_by => 'apipe-tester',
    software_revision => $test_version,
    status => ['Scheduled', 'Running', 'Succeeded'],
);
if ($build) {
    printf("Got existing build (%s) for current test version.\n", $build->__display_name__);
} else {
    print("Creating new build....\n");
    $build = Genome::Model::Build->create(
        model_id => $model->id,
        software_revision => $test_version,
    );
    unless ($build) {
        print("Could not create new build!\n") and exit(255);
    }
    print("Starting build...\n");
    unless ($build->start()) {
        print("Cound not start new build!\n") and exit(255);
    }
    print("Saving build...\n");
    unless (UR::Context->commit()) {
        print("Could not save new build!\n") and exit(255);
    }
    print("Build saved.\n");
}

my $event = $build->the_master_event;
unless ($event) {
    print("Could not get the build's master event!\n") and exit(255);
}

my $build_type = get_model_camel_type($model);
my @to = (Users->can($build_type)) ? Users->$build_type : Users::apipe();
my @cc = Users::apipe();
if ($ENV{GENOME_QUERY_POSTGRES}) {
    @to = ('apipe-tester', 'boberkfe');
    @cc = ();
}

printf("Monitoring build (%s) until it completes or timeout of %s minutes is reached.\n\n", $build->id, $timeout / 60);
my $interval = ($timeout > 30 ? 30 : 1);
my $start_time = time;
while (!grep { $event->event_status eq $_ } ('Succeeded', 'Failed', 'Crashed')) {
    UR::Context->current->reload($event);
    my $elapsed_time = time - $start_time;
    if ($elapsed_time > $timeout) {
        my $subject = sprintf('%s - Build %d - Timed Out', $test_spec, $build_number);
        my $body = join("\n",
            sprintf('Project: %s', $job_name),
            sprintf('Build: %s', $build_url),
            sprintf('Console: %sconsole', $build_url),
        );
        Library::send_mail(
            from => 'apipe-tester@genome.wustl.edu',
            to => Library::users_to_addresses(@to),
            cc => Library::users_to_addresses(@cc),
            subject => $subject,
            body => $body,
        );
        exit(255);
    }
    sleep($interval);
}

$build = UR::Context->current->reload('Genome::Model::Build', id => $build->id);
if ($build->status eq 'Succeeded') {
    printf("Build status is %s.\n", $build->status);
} else {
    my $subject = sprintf('%s - Build %d - Build Failed', $test_spec, $build_number);
    my $body = join("\n",
        sprintf('Project: %s', $job_name),
        sprintf('Build: %s', $build_url),
        sprintf('Console: %sconsole', $build_url),
    );
    Library::send_mail(
        from => 'apipe-tester@genome.wustl.edu',
        to => Library::users_to_addresses(@to),
        cc => Library::users_to_addresses(@cc),
        subject => $subject,
        body => $body,
    );
    exit(255);
}

my $new_build = Genome::Model::Build->get(
    model_name => $model_name,
    run_by => 'apipe-tester',
    software_revision => $test_version,
    status => 'Succeeded',
);
unless ($new_build) {
    print("Could not get test build!\n") and exit(255);
}

printf('Starting diff (new build = %s)...', $new_build->id);
my $diff_cmd = Genome::Model::Build::Command::DiffBlessed->create(
    new_build => $new_build,
);
unless ($diff_cmd->execute) {
    print("Diff command failed to execute!\n") and exit(255);
}

my $has_diffs = (defined($diff_cmd->_diffs) && scalar(keys %{$diff_cmd->_diffs})) || 0;
if ($has_diffs) {
    my $subject = sprintf('%s - Build %d - Diffs Found', $test_spec, $build_number);
    my $body = join("\n",
        sprintf('Project: %s', $job_name),
        sprintf('Build: %s', $build_url),
        sprintf('Console: %sconsole', $build_url),
        '********************************************************************************',
        sprintf('If you want to bless this build (%s) update and commit the DB file: %s.', $new_build->id, $diff_cmd->db_file),
        '********************************************************************************',
        $diff_cmd->diffs_message,
    );
    Library::send_mail(
        from => 'apipe-tester@genome.wustl.edu',
        to => Library::users_to_addresses(@to),
        cc => Library::users_to_addresses(@cc),
        subject => $subject,
        body => $body,
    );
    exit(255);
}

sub get_model_camel_type {
    my ($model) = shift;
    my $type = $model->class;
    $type =~ s/Genome::Model:://;
    $type =~ s/:://g;
    return Genome::Utility::Text::camel_case_to_string($type, '_');
}
