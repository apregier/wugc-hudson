#!/usr/bin/env perl

require File::Basename;
require IO::File;
require File::Slurp;
require Mail::Sender;
require Getopt::Long;

BEGIN {
	require File::Basename;
	push @INC, File::Basename::dirname(__FILE__) . '/../lib/';
}
require Defaults;

use strict;
use warnings;

our $BIN_DIR = File::Basename::dirname(__FILE__);

my ($help, $announce_only) = ('', '');
unless(Getopt::Long::GetOptions('help' => \$help, 'announce-only' => \$announce_only)) {
    exit;
}
if ( @ARGV != 1 || $help ) {;
	print help_message();
	exit;
};

my $NEW_BUILD_IDENTIFIER = shift @ARGV;

(my $OLD_BUILD_NAME = readlink($Defaults::STABLE_PIPELINE)) =~ s/.*\///;
(my $OLD_BUILD_VERSION = $OLD_BUILD_NAME) =~ s/-fix.*//;

(my $NEW_BUILD_NAME = "genome-$NEW_BUILD_IDENTIFIER") =~ s/genome-genome/genome/;
(my $NEW_BUILD_VERSION = $NEW_BUILD_NAME) =~ s/-fix.*//;

unless ( $announce_only ) {
    promote_symlinks(build_name => $NEW_BUILD_NAME) || die;
    sync_snapshot_to_lib_perl(build_name => $NEW_BUILD_NAME) || die;
}

my $changes_summary_file = create_changes_summary(
    build_name => $NEW_BUILD_NAME,
    old_version => $OLD_BUILD_VERSION,
    new_version => $NEW_BUILD_VERSION,
    announce_only => $announce_only
);
if ( -s $changes_summary_file ) {
    my $changes_summary = File::Slurp::read_file($changes_summary_file);
    my $subject;
    if ( $announce_only ) {
        $subject = "Promoting $NEW_BUILD_NAME in one hour";
        $changes_summary = "Please let us know if there are any concerns with promoting this version to genome-stable.\n\n" . $changes_summary;
    }
    else {
        $subject = "$NEW_BUILD_NAME promoted to genome-stable";
    }
	send_announcement_email(to => 'apipe@genome.wustl.edu', subject => $subject, msg => $changes_summary);
}

print "Symlinks point to:\n";
print "stable-pipeline: " . readlink($Defaults::STABLE_PIPELINE) . "\n";
print "stable-web: " . readlink($Defaults::STABLE_WEB) . "\n";
print "stable-user: " . readlink($Defaults::STABLE_USER) . "\n";

### Methods ###

sub help_message {
	my $help_message;
	$help_message .= "Usage:\n";
    $help_message .= "$0 <version>                \t-- promotes version and announces it to apipe\n";
    $help_message .= "$0 --announce-only <version>\t-- only announces that promotion will occur in one hour\n";
	return $help_message;
};

sub promote_symlinks {
	my (%params) = @_;
	my $build_name = delete $params{build_name} || die;
	my $build_path = build_path($build_name);
		
	if (my @params_keys = keys %params) {
		die "Invalid params passed to promote_symlinks: '" . join(', ', @params_keys) . "'\n";
	}
	
	print "Changing stable symlink ($build_name)\n";
	system("cd $Defaults::BASE_DIR && ln -sf $build_path $Defaults::STABLE_PIPELINE-new");
	system("cd $Defaults::BASE_DIR && mv -Tf $Defaults::STABLE_PIPELINE-new $Defaults::STABLE_PIPELINE");
	
	print "Changing web symlink ($build_name, needs a restart)\n";
	system("cd $Defaults::BASE_DIR && ln -sf $build_path $Defaults::STABLE_WEB-new");
	system("cd $Defaults::BASE_DIR && mv -Tf $Defaults::STABLE_WEB-new $Defaults::STABLE_WEB");
	
	print "Changing user symlink ($build_name)\n";
	system("cd $Defaults::BASE_DIR && ln -sf $build_path $Defaults::STABLE_USER-new");
	system("cd $Defaults::BASE_DIR && mv -Tf $Defaults::STABLE_USER-new $Defaults::STABLE_USER");

	return 1;
}

sub sync_snapshot_to_lib_perl {
    my (%params) = @_;
    my $build_name = delete $params{build_name} || die;
    my $build_path = build_path($build_name);

    if (my @params_keys = keys %params) {
        die "Invalid params passed to sync_snapshot_to_lib_perl: '" . join(', ', @params_keys) . "'\n";
    }

    print "Deploying $build_name to /gsc/scripts/lib/perl...\n";

    my @dirs = glob("$build_path/lib/perl/*/");
    for my $dir (@dirs) {
        my $basename = $dir;
        $basename =~ s/\/$//;
        $basename =~ s/.*\///;
        print "\tSyncing $basename...\n";
        system("rsync -rltoD --delete $dir/ /gsc/scripts/lib/perl/$basename/")
    }

	my @files = glob("$build_path/lib/perl/*.pm");
	my @short_files = map { File::Basename::basename($_) } @files;
	print "\tSyncing top-level files (" . join(', ', @short_files) . ")...\n";
	for my $file (@files) {
        system("cp --force --preserve=timestamps $file /gsc/scripts/lib/perl/")
	}
	
	return 1;
}

sub create_changes_summary {
	my (%params) = @_;
	my $build_name = delete $params{build_name} || die;
	my $old_version = delete $params{old_version} || die;
	my $new_version = delete $params{new_version} || die;
    my $announce_only = delete $params{announce_only};
	my $build_path = build_path($build_name);
	
	if (my @params_keys = keys %params) {
		die "Invalid params passed to sync_snapshot_to_lib_perl: '" . join(', ', @params_keys) . "'\n";
	}
	
	# create git-changelog
    if (not $announce_only) {
        if ( -s "$build_path/previous_version" ) {
            chomp($old_version = qx[cat $build_path/previous_version]);
        }
        else {
            system("echo $old_version > $build_path/previous_version")
        }
    }
    system("$BIN_DIR/changelog $old_version $new_version > $build_path/git-changelog");

	# create CHANGE_SUMMARY
	unlink("$build_path/CHANGE_SUMMARY");
	my @change_summary;
	if ( -s "$build_path/git-changelog" ) {
		my @git_changelog_lines = File::Slurp::read_file("$build_path/git-changelog");
		push @change_summary, "== Highlighted Changes From $old_version to $new_version ==\n\n", @git_changelog_lines;
	}
	if ( -s "$build_path/hotfixes" ) {
		my @hotfixes_lines = File::Slurp::read_file("$build_path/hotfixes");
		my @hotfixes_reasons = grep { $_ =~ /^Fix/ } @hotfixes_lines;
		my @hotfixes_details = grep { $_ !~ /^Fix/ } @hotfixes_lines;
		unshift @change_summary, "== Hotfix History ==\n\n", @hotfixes_reasons, "\n";
		push @change_summary, "== Hotfix Commit Details ==\n\n", @hotfixes_details;
	}
    if (@change_summary == 0) {
        push @change_summary, "No changes highlighted.\n\n";
    }
	push @change_summary, "== Discalimer ==\n\n", "This is a summary of highlighted changes since $old_version and any hotfixes made to $new_version. For an exhaustive list try 'git log $old_version..$new_version'.\n";
	File::Slurp::write_file("$build_path/CHANGE_SUMMARY", @change_summary);
	return "$build_path/CHANGE_SUMMARY";
}

sub send_announcement_email {
	my (%params) = @_;
	my $mail_to = delete $params{to} || die;
	my $mail_subject = delete $params{subject} || die;
	my $mail_msg = delete $params{msg} || die;
	
	if (my @params_keys = keys %params) {
		die "Invalid params passed to send_announcement_email: " . join(', ', @params_keys) . ".\n";
	}
	
	my $user_name = getpwuid($<);
	my $mail_from = $user_name . '@genome.wustl.edu';
	
    my $sender = Mail::Sender->new({
        smtp => 'gscsmtp.wustl.edu',
        from => $mail_from,
    });
    $sender->MailMsg({
        to => $mail_to,
        subject => $mail_subject,
        msg     => $mail_msg,
    });
	print "Sent annnouncement mail to $mail_to...\n";
    return 1;
};

sub build_path {
	my $build_name = shift;
	my $build_path;
    if ( $build_name =~ /-fix\d+$/ ) {
        $build_path = "./snapshots/custom/$build_name";
    } else {
        $build_path = "./snapshots/stable/$build_name";
    }
	
	unless ( -d $build_path ) {
		die "Build path is not a directory: '$build_path'\n";
	}
	
	return $build_path;
};
