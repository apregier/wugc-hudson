#!/usr/bin/perl

use Genome;
use Revision;
use Library;
use Users;
use JenkinsData;
use Memoize qw(memoize);

use strict;
use warnings;


# flush output buffer after every write or print
local $| = 1;
Library::setup_model_process_test();


Library::set_genome_software_result_test_name();

if (Genome::Sys->username eq 'apipe-tester' && !$ENV{MODEL_TEST_TO}) {
    if (Users->can('cle')) {
        $ENV{MODEL_TEST_TO} = Library::users_to_addresses(Users->cle);
    }
}

my $cmd0 = Genome::Config::AnalysisProject::Command::Create->create(
    environment => "ad-hoc",
    name => "CLE Test",
    no_config => 1
);
my $analysis_project = $cmd0->execute;
my $menu_item1 = Genome::Config::AnalysisMenu::Item->get("9ab6e28f832a428393b87b171d444401");
my $menu_item2 = Genome::Config::AnalysisMenu::Item->get("3770b8510d5a459f9c0bb01fabf56337");
my $discovery_tag = Genome::Config::Tag->get(name => 'discovery');
my $followup_tag = Genome::Config::Tag->get(name => 'followup');
my $germline_tag = Genome::Config::Tag->get(name => 'germline');
my $cmd1 = Genome::Config::AnalysisProject::Command::AddMenuItem->create(
    analysis_menu_items => $menu_item1,
    tags => $discovery_tag,
    analysis_project => $analysis_project,
);
$cmd1->execute;
my $cmd2 = Genome::Config::AnalysisProject::Command::AddMenuItem->create(
    analysis_menu_items => $menu_item1,
    tags => $followup_tag,
    analysis_project => $analysis_project,
);
$cmd2->execute;
my $cmd3 = Genome::Config::AnalysisProject::Command::AddMenuItem->create(
    analysis_menu_items => $menu_item2,
    tags => $germline_tag,
    analysis_project => $analysis_project,
);
$cmd3->execute;
my $subject_mapping_file = Genome::Sys->create_temp_file_path;
my $subject_mapping = <<'SUBJECT_MAPPINGS';
H_KA-174556-1309237	H_KA-174556-1309246				followup
H_KA-174556-1309245	H_KA-174556-1309246				discovery
H_KA-174556-1309246					germline
SUBJECT_MAPPINGS

Genome::Sys->write_file($subject_mapping_file, $subject_mapping);
my $cmd4 = Genome::Config::AnalysisProject::SubjectMapping::Command::Import::SomaticValidation->create(
    analysis_project => $analysis_project,
    file_path => $subject_mapping_file,
);
$cmd4->execute;

my @instrument_data = qw(2893814999 2893815000 2893815001 2893815002 2893815003 2893815016 2893815018 2893815020 2893815023 2893815024 2893815447 2893815448 2893815449 2893815451 2893815484 2893815485 2893815489 2893815492);
for my $id (@instrument_data) {
    my $instrument_data = Genome::InstrumentData->get($id);
    Genome::Config::AnalysisProject::InstrumentDataBridge->create(
        analysis_project => $analysis_project,
        instrument_data => $instrument_data,
        status => 'new',
    );
}

my $cmd5 = Genome::Config::AnalysisProject::Command::Release->create(
    analysis_projects => [$analysis_project],
);
$cmd5->execute;

my @instrument_data_objects = Genome::InstrumentData->get(id => \@instrument_data);
my @pre_cqid_models = Genome::Model->get();
my $pre_cqid_model_count = scalar @pre_cqid_models;
my $cmd6 = Genome::Config::Command::ConfigureQueuedInstrumentData->create(
    instrument_data => \@instrument_data_objects,
);
$cmd6->execute;
my @post_cqid_models = Genome::Model->get();
my $post_cqid_model_count = scalar @post_cqid_models;
my $expected_number_of_models = 7;
my $actual_number_of_models = $post_cqid_model_count - $pre_cqid_model_count;
unless ($actual_number_of_models == $expected_number_of_models) {
    fail(sprintf("We expected CQID to create %s models and it actually created %s\n",
        $expected_number_of_models,
        $actual_number_of_models));
}

my @models = Genome::Model->get(analysis_projects => [$analysis_project]);
my $start_cmd = Genome::Model::Build::Command::Start->create(
    models => \@models,
);
$start_cmd->execute;
UR::Context->commit;
my @builds = Genome::Model::Build->get(model_id => [map {$_->id} @models]);

my $start_time = time;
my @diff_cmds;
for my $build (@builds) {
    wait_for_build($build, $start_time);
    $build = UR::Context->current->reload('Genome::Model::Build', id => $build->id);
    check_build_failure($build);
    my $diff_cmd = diff_build($build);
    if (defined $diff_cmd) {
        push @diff_cmds, $diff_cmd;
    }
}

my $discovery_subject = get_sample_from_subject_mapping($analysis_project, $discovery_tag);
my $followup_subject = get_sample_from_subject_mapping($analysis_project, $followup_tag);
my $germline_subject = get_sample_from_subject_mapping($analysis_project, $germline_tag);

my @models_for_process = Genome::Model::SomaticValidation->get(analysis_projects => [$analysis_project],
    region_of_interest_set_name => 'SeqCap EZ Human Exome v3.0 + AML RMG pooled probes + WO2830729 pooled probes + WO2840081 pooled probes');
my @coverage_models_for_process = Genome::Model::SomaticValidation->get(analysis_projects => [$analysis_project],
    tumor_sample => [$discovery_subject, $followup_subject]);
my @germline_models = grep {$_->tumor_sample eq $germline_subject} @models_for_process;
my $process_command = Genome::VariantReporting::Command::Wrappers::Trio->create(
    models => \@models_for_process,
    coverage_models => \@coverage_models_for_process,
    tumor_sample => $discovery_subject,
    followup_sample => $followup_subject,
    normal_sample => $germline_subject,
);
my $process = $process_command->execute;
UR::Context->commit;
wait_for_process($process);

UR::Context->current->reload($process);

check_process_failure($process);

my $process_diff_cmd = diff_process($process);
if ($process_diff_cmd) {
    push @diff_cmds, $process_diff_cmd;
}
if (@diff_cmds) {
    Library::send_diff_mail(@diff_cmds);
    exit(255);
}
# functions
sub get_sample_from_subject_mapping {
    my ($anp, $tag) = @_;
    my $mapping = Genome::Config::AnalysisProject::SubjectMapping->get(analysis_project => $anp,
        tags => [$tag]);
    my @bridges = grep {$_->label eq 'tumor_sample'} $mapping->subject_bridges;
    my $bridge = $bridges[0];
    return $bridge->subject;
}

sub get_timeout {
    my $timeout_hours = 14;
    my $timeout_seconds = $timeout_hours * 3600;

    return $timeout_seconds;
}

sub get_process_timeout {
    my $timeout_hours = 14;
    my $timeout_seconds = $timeout_hours * 3600;

    return $timeout_seconds;
}

sub wait_for_build {
    my $build = shift;
    my $start_time = shift;
    my $event = $build->the_master_event;
    unless ($event) {
        fail("Could not get the build's master event!\n");
    }

    my $timeout = get_timeout();
    printf("Monitoring build (%s) until it completes or timeout "
        . "of %s minutes is reached.\n\n", $build->id, $timeout / 60);

    while (!grep { $event->event_status eq $_ } ('Succeeded',
            'Failed', 'Crashed')) {
        UR::Context->current->reload($event);

        my $elapsed_time = time - $start_time;
        if ($elapsed_time > $timeout) {
            printf("Build (%s) timed out after %s minutes",
                $build->id, $timeout / 60);
            Library::send_timeout_mail();
            build_view_and_exit($build);
        }

        sleep(30);
    }
}

sub wait_for_process {
    my $process = shift;

    my $timeout = get_process_timeout();
    printf("Monitoring process (%s) until it completes or timeout "
        . "of %s minutes is reached.\n\n", $process->id, $timeout / 60);

    my $start_time = time;
    while (!grep { $process->status eq $_ } ('Succeeded', 'Crashed')) {
        UR::Context->current->reload($process);

        my $elapsed_time = time - $start_time;
        if ($elapsed_time > $timeout) {
            printf("Process (%s) timed out after %s minutes",
                $process->id, $timeout / 60);
            Library::send_timeout_mail();
            process_view_and_exit($process);
        }

        sleep(30);
    }
}

sub process_view_and_exit {
    my $process = shift;
    my $pv_command = Genome::Process::Command::View->create(
        process => $process);
    $pv_command->execute;
    exit(255);
}

sub check_build_failure {
    my $build = shift;

    if ($build->status eq 'Succeeded') {
        printf("Build status is %s.\n", $build->status);
    } else {
        Library::send_fail_mail();
        build_view_and_exit($build);
    }
}

sub diff_build {
    my $build = shift;

    printf('Starting diff (new build = %s)...', $build->id);

    my @blessed_builds = Genome::Model::Build->get(id => [qw(
    185d8bac3d7c4437b7ce9207dfadac7e
    5f57f08a8fd84886b275f0b5571e9fd7
    e02e8a5ccaad458d839de51eb47d8d2c
    26e65adaa8034dd99ef92b27f61ad862
    3243f261a8b64c089a5254291f7c2de3
    f87701c292e843958d088e171a65a67a
    301d5d51c96e41308d015008720f3962
    )]);

    my $matching_blessed_build;
    for my $blessed_build (@blessed_builds) {
        if ($build->tumor_sample eq $blessed_build->tumor_sample and
                (($build->normal_sample == undef and $blessed_build->normal_sample == undef) or
                    ($build->normal_sample eq $blessed_build->normal_sample)) and
            $build->target_region_set_name eq $blessed_build->target_region_set_name) {
                $matching_blessed_build = $blessed_build;
                last;
            }
    }
    unless (defined $matching_blessed_build) {
        fail(sprintf("No matching blessed build found for build %s\n", $build->id));
    }

    my $diff_cmd = Genome::Model::Build::Command::Diff->create(
        new_build => $build,
        blessed_build => $matching_blessed_build,
    );
    unless ($diff_cmd->execute) {
        fail(sprintf("Diff command failed to execute for build %s!\n", $build->id));
    }

    if (Library::diff_cmd_has_diffs($diff_cmd)) {
        return $diff_cmd;
    }
    return;
}

sub diff_process {
    my $process = shift;

    my $blessed_process = Genome::Process->get("2b2b3d8481284fcf8a1632d65ba58083");

    printf('Starting diff (new process = %s)...', $process->id);
    my $diff_cmd = Genome::Process::Command::Diff->create(
        new_process => $process,
        blessed_process => $blessed_process,
    );
    unless ($diff_cmd->execute) {
        fail("Diff command failed to execute!\n");
    }

    if (Library::diff_cmd_has_diffs($diff_cmd)) {
        return $diff_cmd;
    }
    return;
}

sub build_view_and_exit {
    my $build = shift;
    my $bv_command = Genome::Model::Build::Command::View->create(
        build => $build);
    $bv_command->execute;
    exit(255);
}

sub fail {
    if (scalar(@_) == 1) {
        print @_;
    } elsif (scalar(@_) > 1) {
        printf @_;
    } else {
        print "Failed to execute cle test\n";
    }

    exit(255);
}

sub check_process_failure {
    my $process = shift;

    if ($process->status eq 'Succeeded') {
        printf("Process status is %s.\n", $process->status);
    } else {
        Library::send_fail_mail();
        process_view_and_exit($process);
    }
}

sub process_view_and_exit {
    my $process = shift;
    my $pv_command = Genome::Process::Command::View->create(
        process => $process);
    $pv_command->execute;
    exit(255);
}
